// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTIONINFO_ROC_H_
#define FLATBUFFERS_GENERATED_ACTIONINFO_ROC_H_

#include "flatbuffers/flatbuffers.h"

namespace ROC {

struct ActionInfo;
struct ActionInfoBuilder;

struct ActionInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ActionInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UAV_ID = 4,
    VT_LATITUDE = 6,
    VT_LONGITUDE = 8
  };
  const flatbuffers::String *uav_id() const {
    return GetPointer<const flatbuffers::String *>(VT_UAV_ID);
  }
  const flatbuffers::String *latitude() const {
    return GetPointer<const flatbuffers::String *>(VT_LATITUDE);
  }
  const flatbuffers::String *longitude() const {
    return GetPointer<const flatbuffers::String *>(VT_LONGITUDE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UAV_ID) &&
           verifier.VerifyString(uav_id()) &&
           VerifyOffset(verifier, VT_LATITUDE) &&
           verifier.VerifyString(latitude()) &&
           VerifyOffset(verifier, VT_LONGITUDE) &&
           verifier.VerifyString(longitude()) &&
           verifier.EndTable();
  }
};

struct ActionInfoBuilder {
  typedef ActionInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uav_id(flatbuffers::Offset<flatbuffers::String> uav_id) {
    fbb_.AddOffset(ActionInfo::VT_UAV_ID, uav_id);
  }
  void add_latitude(flatbuffers::Offset<flatbuffers::String> latitude) {
    fbb_.AddOffset(ActionInfo::VT_LATITUDE, latitude);
  }
  void add_longitude(flatbuffers::Offset<flatbuffers::String> longitude) {
    fbb_.AddOffset(ActionInfo::VT_LONGITUDE, longitude);
  }
  explicit ActionInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ActionInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ActionInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ActionInfo> CreateActionInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uav_id = 0,
    flatbuffers::Offset<flatbuffers::String> latitude = 0,
    flatbuffers::Offset<flatbuffers::String> longitude = 0) {
  ActionInfoBuilder builder_(_fbb);
  builder_.add_longitude(longitude);
  builder_.add_latitude(latitude);
  builder_.add_uav_id(uav_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<ActionInfo> CreateActionInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uav_id = nullptr,
    const char *latitude = nullptr,
    const char *longitude = nullptr) {
  auto uav_id__ = uav_id ? _fbb.CreateString(uav_id) : 0;
  auto latitude__ = latitude ? _fbb.CreateString(latitude) : 0;
  auto longitude__ = longitude ? _fbb.CreateString(longitude) : 0;
  return ROC::CreateActionInfo(
      _fbb,
      uav_id__,
      latitude__,
      longitude__);
}

inline const ROC::ActionInfo *GetActionInfo(const void *buf) {
  return flatbuffers::GetRoot<ROC::ActionInfo>(buf);
}

inline const ROC::ActionInfo *GetSizePrefixedActionInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ROC::ActionInfo>(buf);
}

inline bool VerifyActionInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ROC::ActionInfo>(nullptr);
}

inline bool VerifySizePrefixedActionInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ROC::ActionInfo>(nullptr);
}

inline void FinishActionInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ROC::ActionInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedActionInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ROC::ActionInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ROC

#endif  // FLATBUFFERS_GENERATED_ACTIONINFO_ROC_H_
